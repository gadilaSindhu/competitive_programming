
INSERTION IN A BINARY TREE IN LEVEL ORDER

insertion is done in level-order, aka bfs. it involvesinserting nodes level by level,
starting from the tree.

algorithm:

--start 
---1. create a queue and enqueue the root node
---2. while the queue is not empty, do :
		a. dequeue a node from front of the queue
		b. if left child of the dequeue node is empty, insert the new node as the left child.
		otherwise, enqueu the left child
		c. if the right child of the dequeue node is empty, indert the new node as the right child.
		otherwise, enqueue the right child
---3. repeat step 2 until the new node is inserted into the binary tree
--End


from collections import dequeue

class TreeNode:
	def __init__(self,data):
		self.key = data
		self.left = None
		self.roght = None
		
def inorder_traversal(root):
	if root:
		inorder_traversal(root.left)
		print(root.key, end= " ")
		inorder_traversal(root.right)
	
def indert(root,key):
	if not root:
		return TreeNode(key)
		
	queue = dequeue([root])
	while queue:
		node = queue.popleft()
		
		if not node.left:
			node.left = TreeNode(key)
			break
		else:
			queue.append(node.left)
			
		if not node.right:
			node.right = TreeNode(key)
			break
		else:
			queue.append(node.right)
			
#driver code
if __name__ == "__main__":
	root = TreeNode(50)
	root.left = TreeNode(30)
	root.left.left = TreeNode(20)
	root.left.right = TreeNode(40)
	root,right = TreeNode(70)
	root.right.right = TreeNode(80)
	
	print("Inorder Traversal before insertion:", end = " ")
	inorder_traversal(root)
	
	key = 60
	insert(root,key)
	
	print("\n inorder traversal after insertion:", end=" ")
	inorder_traversal(root)